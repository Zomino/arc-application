{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React from 'react';\nimport 'react-native-gesture-handler';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { useState, useEffect } from 'react';\nimport NewArcScreen from \"../screens/NewArcScreen\";\nimport FoodScreen from \"../screens/FoodScreen\";\nimport DrinksScreen from \"../screens/DrinksScreen\";\nimport FriendsScreen from \"../screens/FriendsScreen\";\nimport ApiService from \"../ApiService\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function NewArcNavigator(_ref) {\n  var user = _ref.user;\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      userList = _useState2[0],\n      setUserList = _useState2[1];\n\n  useEffect(function () {\n    ApiService.getUsers().then(function (users) {\n      return setUserList(users);\n    }).then(function (userList) {\n      return console.log(userList);\n    });\n  }, []);\n  var Stack = createStackNavigator();\n  return _jsxs(Stack.Navigator, {\n    initialRouteName: \"NewArcScreen\",\n    screenOptions: {\n      headerShown: false\n    },\n    children: [_jsx(Stack.Screen, {\n      name: \"NewArcScreen\",\n      component: NewArcScreen,\n      initialParams: {\n        user: user\n      }\n    }), _jsx(Stack.Screen, {\n      name: \"FoodScreen\",\n      component: FoodScreen,\n      initialParams: {\n        user: user\n      }\n    }), _jsx(Stack.Screen, {\n      name: \"DrinksScreen\",\n      component: DrinksScreen,\n      initialParams: {\n        user: user\n      }\n    }), _jsx(Stack.Screen, {\n      name: \"FriendsScreen\",\n      component: FriendsScreen,\n      initialParams: {\n        user: user\n      }\n    })]\n  });\n}","map":{"version":3,"sources":["/Users/gooseeduardos/Development/codeWorks/senior/arc-app/client/arc/components/NewArcNavigator.tsx"],"names":["React","createStackNavigator","useState","useEffect","NewArcScreen","FoodScreen","DrinksScreen","FriendsScreen","ApiService","NewArcNavigator","user","userList","setUserList","getUsers","then","users","console","log","Stack","headerShown"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,8BAAP;AACA,SAASC,oBAAT,QAAqC,yBAArC;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAA8C,OAA9C;AACA,OAAOC,YAAP;AACA,OAAOC,UAAP;AACA,OAAOC,YAAP;AACA,OAAOC,aAAP;AACA,OAAOC,UAAP;;;AAOA,eAAe,SAASC,eAAT,OAAyD;AAAA,MAA9BC,IAA8B,QAA9BA,IAA8B;;AAEtE,kBAAgCR,QAAQ,CAAC,EAAD,CAAxC;AAAA;AAAA,MAAOS,QAAP;AAAA,MAAiBC,WAAjB;;AAEAT,EAAAA,SAAS,CAAC,YAAM;AACdK,IAAAA,UAAU,CAACK,QAAX,GACCC,IADD,CACM,UAAAC,KAAK;AAAA,aAAIH,WAAW,CAACG,KAAD,CAAf;AAAA,KADX,EAECD,IAFD,CAEM,UAAAH,QAAQ;AAAA,aAAIK,OAAO,CAACC,GAAR,CAAYN,QAAZ,CAAJ;AAAA,KAFd;AAGD,GAJQ,EAIP,EAJO,CAAT;AAeA,MAAMO,KAAK,GAAGjB,oBAAoB,EAAlC;AAEA,SACE,MAAC,KAAD,CAAO,SAAP;AAAiB,IAAA,gBAAgB,EAAC,cAAlC;AAAiD,IAAA,aAAa,EAAE;AAC9DkB,MAAAA,WAAW,EAAE;AADiD,KAAhE;AAAA,eAGE,KAAC,KAAD,CAAO,MAAP;AAAc,MAAA,IAAI,EAAC,cAAnB;AAAkC,MAAA,SAAS,EAAEf,YAA7C;AAA2D,MAAA,aAAa,EAAE;AAACM,QAAAA,IAAI,EAAEA;AAAP;AAA1E,MAHF,EAIE,KAAC,KAAD,CAAO,MAAP;AAAc,MAAA,IAAI,EAAC,YAAnB;AAAgC,MAAA,SAAS,EAAEL,UAA3C;AAAuD,MAAA,aAAa,EAAE;AAACK,QAAAA,IAAI,EAAEA;AAAP;AAAtE,MAJF,EAKE,KAAC,KAAD,CAAO,MAAP;AAAc,MAAA,IAAI,EAAC,cAAnB;AAAkC,MAAA,SAAS,EAAEJ,YAA7C;AAA2D,MAAA,aAAa,EAAE;AAACI,QAAAA,IAAI,EAAEA;AAAP;AAA1E,MALF,EAME,KAAC,KAAD,CAAO,MAAP;AAAc,MAAA,IAAI,EAAC,eAAnB;AAAmC,MAAA,SAAS,EAAEH,aAA9C;AAA6D,MAAA,aAAa,EAAE;AAACG,QAAAA,IAAI,EAAEA;AAAP;AAA5E,MANF;AAAA,IADF;AAaD","sourcesContent":["import React from 'react'\nimport { View, Text } from 'react-native'\nimport 'react-native-gesture-handler';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { useState, useEffect, Dispatch } from 'react'\nimport NewArcScreen from '../screens/NewArcScreen';\nimport FoodScreen from '../screens/FoodScreen';\nimport DrinksScreen from '../screens/DrinksScreen';\nimport FriendsScreen from '../screens/FriendsScreen';\nimport ApiService from '../ApiService';\n\ninterface NewArcNavigatorProps {\n  user: string\n}\n\n\nexport default function NewArcNavigator({ user }: NewArcNavigatorProps) {\n\n  const [userList, setUserList] = useState(\"\")\n\n  useEffect(() => {\n    ApiService.getUsers()\n    .then(users => setUserList(users))\n    .then(userList => console.log(userList))\n  },[],\n  )\n\n  type StackParamsList = {\n    NewArcScreen: {user: string},\n    FoodScreen: {user: string},\n    DrinksScreen: {user: string},\n    FriendsScreen: {user: string},\n  }\n\n\n  const Stack = createStackNavigator<StackParamsList>();\n\n  return (\n    <Stack.Navigator initialRouteName=\"NewArcScreen\" screenOptions={{\n      headerShown: false\n    }}>\n      <Stack.Screen name=\"NewArcScreen\" component={NewArcScreen} initialParams={{user: user}}/>\n      <Stack.Screen name=\"FoodScreen\" component={FoodScreen} initialParams={{user: user}}/>\n      <Stack.Screen name=\"DrinksScreen\" component={DrinksScreen} initialParams={{user: user}}/>\n      <Stack.Screen name=\"FriendsScreen\" component={FriendsScreen} initialParams={{user: user}}/>\n      {/* <Stack.Screen name=\"NewArcScreen\" component={() => <NewArcScreen user={user} />} />\n      <Stack.Screen name=\"FoodScreen\" component={() => <FoodScreen user={user} />} />\n      <Stack.Screen name=\"DrinksScreen\" component={() => <DrinksScreen user={user} />} /> */}\n    </Stack.Navigator>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}
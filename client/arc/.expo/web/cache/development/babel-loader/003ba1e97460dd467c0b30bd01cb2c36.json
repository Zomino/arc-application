{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ApiService from \"../ApiService\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function SingleEventScreen(props) {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      event = _useState2[0],\n      setEvent = _useState2[1];\n\n  useEffect(function () {\n    var currentEvent = {\n      event: props.route.params.eventId\n    };\n    ApiService.getEvent(currentEvent).then(function (events) {\n      return setEvent(events);\n    });\n  }, []);\n  var myEvent = event.map(function (event) {\n    return _jsx(Text, {\n      children: event.eventName\n    });\n  });\n  return _jsx(View, {\n    children: myEvent\n  });\n}","map":{"version":3,"sources":["/Users/gooseeduardos/Development/codeWorks/senior/arc-app/client/arc/screens/SingleEventScreen.tsx"],"names":["React","useEffect","useState","ApiService","SingleEventScreen","props","event","setEvent","currentEvent","route","params","eventId","getEvent","then","events","myEvent","map","eventName"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;AAEA,OAAOC,UAAP;;AAOA,eAAe,SAASC,iBAAT,CAA2BC,KAA3B,EAAsC;AAIrD,kBAA0BH,QAAQ,CAAC,EAAD,CAAlC;AAAA;AAAA,MAAOI,KAAP;AAAA,MAAcC,QAAd;;AAEAN,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMO,YAAY,GAAG;AAACF,MAAAA,KAAK,EAAED,KAAK,CAACI,KAAN,CAAYC,MAAZ,CAAmBC;AAA3B,KAArB;AACAR,IAAAA,UAAU,CAACS,QAAX,CAAoBJ,YAApB,EACCK,IADD,CACM,UAAAC,MAAM;AAAA,aAAIP,QAAQ,CAACO,MAAD,CAAZ;AAAA,KADZ;AAED,GAJQ,EAIP,EAJO,CAAT;AAOA,MAAIC,OAAO,GAAGT,KAAK,CAACU,GAAN,CAAU,UAACV,KAAD,EAAgB;AACtC,WAAO,KAAC,IAAD;AAAA,gBAAOA,KAAK,CAACW;AAAb,MAAP;AACD,GAFa,CAAd;AAIE,SACE,KAAC,IAAD;AAAA,cACGF;AADH,IADF;AAKD","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { View, Text } from 'react-native'\nimport ApiService from '../ApiService'\n\n\ninterface SingleEventScreenProps {\n  user: string\n}\n\nexport default function SingleEventScreen(props:any) {\n\n// console.log(props.route.params)\n\nconst [event, setEvent] = useState([])\n\nuseEffect(() => {\n  const currentEvent = {event: props.route.params.eventId}\n  ApiService.getEvent(currentEvent)\n  .then(events => setEvent(events))\n},[],\n)\n\nlet myEvent = event.map((event: any) => {\n  return <Text>{event.eventName}</Text>\n})\n\n  return (\n    <View>\n      {myEvent}\n    </View>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}
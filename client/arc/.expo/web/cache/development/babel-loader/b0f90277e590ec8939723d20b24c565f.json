{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { useNavigation } from '@react-navigation/native';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function FriendsScreen(props) {\n  var navigation = useNavigation();\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedUsers = _useState2[0],\n      setSelectedUsers = _useState2[1];\n\n  var userList = props.route.params.userList.map(function (user) {\n    return _jsx(Button, {\n      color: selectedUsers.includes(user.email) ? 'blue' : 'black',\n      title: user.firstName + \" \" + user.lastName,\n      onPress: function onPress() {\n        console.log(user);\n        registerAttendee(user.email);\n      }\n    }, user.email);\n  });\n\n  function registerAttendee(email) {\n    setSelectedUsers(function (oldUsers) {\n      return [].concat(_toConsumableArray(oldUsers), [{\n        email: email\n      }]);\n    });\n  }\n\n  return _jsxs(View, {\n    children: [_jsx(Text, {\n      children: \"Add Friends to Arc\"\n    }), userList, _jsx(Button, {\n      color: \"black\",\n      title: \"ADD FRIENDS\",\n      onPress: function onPress() {\n        props.route.params.updateEventUsers(selectedUsers);\n        navigation.navigate('NewArcScreen');\n      }\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  btnClicked: {\n    color: 'red'\n  }\n});","map":{"version":3,"sources":["/Users/gooseeduardos/Development/codeWorks/senior/arc-app/client/arc/screens/FriendsScreen.tsx"],"names":["React","useState","useNavigation","FriendsScreen","props","navigation","selectedUsers","setSelectedUsers","userList","route","params","map","user","includes","email","firstName","lastName","console","log","registerAttendee","oldUsers","updateEventUsers","navigate","styles","StyleSheet","create","btnClicked","color"],"mappings":";;AAAA,OAAOA,KAAP,IAA2BC,QAA3B,QAA2C,OAA3C;;;;;AAIA,SAASC,aAAT,QAA8B,0BAA9B;;;AAUA,eAAe,SAASC,aAAT,CAAuBC,KAAvB,EAAmC;AAGhD,MAAMC,UAAU,GAAGH,aAAa,EAAhC;;AAUA,kBAAiDD,QAAQ,CAAC,EAAD,CAAzD;AAAA;AAAA,MAAOK,aAAP;AAAA,MAAsBC,gBAAtB;;AAKA,MAAIC,QAAQ,GAAGJ,KAAK,CAACK,KAAN,CAAYC,MAAZ,CAAmBF,QAAnB,CAA4BG,GAA5B,CAAgC,UAACC,IAAD,EAE3C;AACA,WAAY,KAAC,MAAD;AAER,MAAA,KAAK,EAAEN,aAAa,CAACO,QAAd,CAAuBD,IAAI,CAACE,KAA5B,IAAqC,MAArC,GAA8C,OAF7C;AAGR,MAAA,KAAK,EAAEF,IAAI,CAACG,SAAL,GAAiB,GAAjB,GAAuBH,IAAI,CAACI,QAH3B;AAIR,MAAA,OAAO,EAAE,mBAAM;AACbC,QAAAA,OAAO,CAACC,GAAR,CAAYN,IAAZ;AACAO,QAAAA,gBAAgB,CAACP,IAAI,CAACE,KAAN,CAAhB;AACD;AAPO,OACHF,IAAI,CAACE,KADF,CAAZ;AAQD,GAXY,CAAf;;AAmBA,WAASK,gBAAT,CAA0BL,KAA1B,EAAsC;AACpCP,IAAAA,gBAAgB,CAAC,UAACa,QAAD;AAAA,0CAAuBA,QAAvB,IAAiC;AAACN,QAAAA,KAAK,EAALA;AAAD,OAAjC;AAAA,KAAD,CAAhB;AACD;;AAGD,SACE,MAAC,IAAD;AAAA,eACE,KAAC,IAAD;AAAA;AAAA,MADF,EAEGN,QAFH,EAGE,KAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,OAAd;AACI,MAAA,KAAK,EAAC,aADV;AAEI,MAAA,OAAO,EAAE,mBAAK;AACZJ,QAAAA,KAAK,CAACK,KAAN,CAAYC,MAAZ,CAAmBW,gBAAnB,CAAoCf,aAApC;AACAD,QAAAA,UAAU,CAACiB,QAAX,CAAoB,cAApB;AAAoC;AAJ1C,MAHF;AAAA,IADF;AAaD;AAED,IAAMC,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB;AAC/BC,EAAAA,UAAU,EAAE;AACVC,IAAAA,KAAK,EAAE;AADG;AADmB,CAAlB,CAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { View, Text, Button, StyleSheet, TextInput } from 'react-native'\nimport { NativeStackScreenProps } from '@react-navigation/native-stack';\nimport ApiService from '../ApiService';\nimport { useNavigation } from '@react-navigation/native';\n\n\n\ntype FriendsScreenParamList = {\n\n}\n\ntype Props = NativeStackScreenProps<FriendsScreenParamList, 'FriendsScreen'>;\n\nexport default function FriendsScreen(props: any) {\n\n\n  const navigation = useNavigation();\n\n  interface UserType {\n    firstName: string,\n    lastName: string,\n    email: string,\n    password: string,\n  }\n\n\n  const [selectedUsers, setSelectedUsers]: any[] = useState([])\n\n\n\n\n  let userList = props.route.params.userList.map((user: any) =>\n\n      {\n      return      <Button\n          key={user.email}\n          color={selectedUsers.includes(user.email) ? 'blue' : 'black'}\n          title={user.firstName + \" \" + user.lastName}\n          onPress={() => {\n            console.log(user)\n            registerAttendee(user.email);\n          } } />;\n    }\n    )\n\n\n\n\n\n\n  function registerAttendee(email: any) {\n    setSelectedUsers((oldUsers: any) => [...oldUsers, {email}])\n  }\n\n\n  return (\n    <View>\n      <Text>Add Friends to Arc</Text>\n      {userList}\n      <Button color=\"black\"\n          title=\"ADD FRIENDS\"\n          onPress={()=> {\n            props.route.params.updateEventUsers(selectedUsers);\n            navigation.navigate('NewArcScreen')}\n          }\n        />\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  btnClicked: {\n    color: 'red'\n  }\n})\n"]},"metadata":{},"sourceType":"module"}
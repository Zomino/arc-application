{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport ApiService from \"../ApiService\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function SingleEventScreen(props) {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      event = _useState2[0],\n      setEvent = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      paid = _useState4[0],\n      setPaid = _useState4[1];\n\n  useEffect(function () {\n    var currentEvent = {\n      event: props.route.params.eventId\n    };\n    ApiService.getEvent(currentEvent).then(function (events) {\n      return setEvent(events);\n    });\n  }, [paid]);\n  useEffect(function () {});\n\n  function payNow(event, user) {\n    ApiService.updatePayment(event, user);\n  }\n\n  var myArc = event.map(function (event) {\n    return _jsx(View, {\n      children: _jsx(Button, {\n        color: paid ? 'pink' : 'blue',\n        title: paid ? 'Paid!' : 'Pay Now',\n        onPress: function onPress() {\n          setPaid(true);\n          payNow(event._id, props.route.params.user);\n        }\n      })\n    }, event._id);\n  });\n  console.log(event);\n  return _jsxs(View, {\n    children: [_jsx(Text, {\n      children: event[0].eventName ? event[0].eventName : 'holder'\n    }), myArc]\n  });\n}","map":{"version":3,"sources":["/Users/gooseeduardos/Development/codeWorks/senior/arc-app/client/arc/screens/SingleEventScreen.tsx"],"names":["React","useEffect","useState","ApiService","SingleEventScreen","props","event","setEvent","paid","setPaid","currentEvent","route","params","eventId","getEvent","then","events","payNow","user","updatePayment","myArc","map","_id","console","log","eventName"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;;AAEA,OAAOC,UAAP;;;AAOA,eAAe,SAASC,iBAAT,CAA2BC,KAA3B,EAAsC;AAErD,kBAA0BH,QAAQ,CAAQ,EAAR,CAAlC;AAAA;AAAA,MAAOI,KAAP;AAAA,MAAcC,QAAd;;AACA,mBAAwBL,QAAQ,CAAC,KAAD,CAAhC;AAAA;AAAA,MAAOM,IAAP;AAAA,MAAaC,OAAb;;AAEAR,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMS,YAAY,GAAG;AAACJ,MAAAA,KAAK,EAAED,KAAK,CAACM,KAAN,CAAYC,MAAZ,CAAmBC;AAA3B,KAArB;AACAV,IAAAA,UAAU,CAACW,QAAX,CAAoBJ,YAApB,EACCK,IADD,CACM,UAAAC,MAAM;AAAA,aAAIT,QAAQ,CAACS,MAAD,CAAZ;AAAA,KADZ;AAED,GAJQ,EAIP,CAACR,IAAD,CAJO,CAAT;AAOAP,EAAAA,SAAS,CAAC,YAAM,CAEf,CAFQ,CAAT;;AAIA,WAASgB,MAAT,CAAgBX,KAAhB,EAA2BY,IAA3B,EAAqC;AACnCf,IAAAA,UAAU,CAACgB,aAAX,CAAyBb,KAAzB,EAAgCY,IAAhC;AACD;;AAID,MAAIE,KAAK,GAAGd,KAAK,CAACe,GAAN,CAAU,UAACf,KAAD,EAAgB;AACpC,WAAO,KAAC,IAAD;AAAA,gBAEP,KAAC,MAAD;AACI,QAAA,KAAK,EAAEE,IAAI,GAAG,MAAH,GAAY,MAD3B;AAEI,QAAA,KAAK,EAAEA,IAAI,GAAG,OAAH,GAAa,SAF5B;AAGI,QAAA,OAAO,EAAE,mBAAM;AACbC,UAAAA,OAAO,CAAC,IAAD,CAAP;AACAQ,UAAAA,MAAM,CAACX,KAAK,CAACgB,GAAP,EAAYjB,KAAK,CAACM,KAAN,CAAYC,MAAZ,CAAmBM,IAA/B,CAAN;AACD;AANL;AAFO,OAAWZ,KAAK,CAACgB,GAAjB,CAAP;AAWD,GAZW,CAAZ;AAcAC,EAAAA,OAAO,CAACC,GAAR,CAAYlB,KAAZ;AAGE,SACE,MAAC,IAAD;AAAA,eACE,KAAC,IAAD;AAAA,gBAAOA,KAAK,CAAC,CAAD,CAAL,CAASmB,SAAT,GAAqBnB,KAAK,CAAC,CAAD,CAAL,CAASmB,SAA9B,GAA0C;AAAjD,MADF,EAEGL,KAFH;AAAA,IADF;AAMD","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { View, Text, Button } from 'react-native'\nimport ApiService from '../ApiService'\n\n\ninterface SingleEventScreenProps {\n  user: string\n}\n\nexport default function SingleEventScreen(props:any) {\n\nconst [event, setEvent] = useState<any[]>([])\nconst [paid, setPaid] = useState(false)\n\nuseEffect(() => {\n  const currentEvent = {event: props.route.params.eventId}\n  ApiService.getEvent(currentEvent)\n  .then(events => setEvent(events))\n},[paid],\n)\n\nuseEffect(() => {\n\n})\n\nfunction payNow(event:any, user:any) {\n  ApiService.updatePayment(event, user)\n}\n\n\n\nlet myArc = event.map((event: any) => {\n  return <View key={event._id}>\n\n  <Button\n      color={paid ? 'pink' : 'blue'}\n      title={paid ? 'Paid!' : 'Pay Now'}\n      onPress={() => {\n        setPaid(true);\n        payNow(event._id, props.route.params.user)\n      }\n        } />\n  </View>\n})\n\nconsole.log(event)\n\n\n  return (\n    <View>\n      <Text>{event[0].eventName ? event[0].eventName : 'holder'}</Text>\n      {myArc}\n    </View>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}
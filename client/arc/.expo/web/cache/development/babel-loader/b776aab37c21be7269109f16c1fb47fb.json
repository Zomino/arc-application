{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function FriendsScreen(props) {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      eventUsers = _useState2[0],\n      setEventUsers = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      toggleArray = _useState4[0],\n      setToggleArray = _useState4[1];\n\n  useEffect(function () {});\n\n  function registerAttendee(email) {\n    (function (eventUsers) {\n      return setEventUsers(eventUsers.push(email));\n    });\n  }\n\n  var userGroup = props.route.params.userList;\n  var answer = userGroup.map(function (user) {\n    return console.log(answer);\n  });\n  return _jsx(View, {\n    children: answer ? answer : \"hi\"\n  });\n}\nvar styles = StyleSheet.create({\n  btnClicked: {\n    color: 'red'\n  }\n});","map":{"version":3,"sources":["/Users/gooseeduardos/Development/codeWorks/senior/arc-app/client/arc/screens/FriendsScreen.tsx"],"names":["React","useEffect","useState","FriendsScreen","props","eventUsers","setEventUsers","toggleArray","setToggleArray","registerAttendee","email","push","userGroup","route","params","userList","answer","map","user","console","log","styles","StyleSheet","create","btnClicked","color"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;;AAYA,eAAe,SAASC,aAAT,CAAuBC,KAAvB,EAAmC;AAUhD,kBAAoCF,QAAQ,CAAC,EAAD,CAA5C;AAAA;AAAA,MAAOG,UAAP;AAAA,MAAmBC,aAAnB;;AACA,mBAA6CJ,QAAQ,CAAC,EAAD,CAArD;AAAA;AAAA,MAAOK,WAAP;AAAA,MAAoBC,cAApB;;AAGFP,EAAAA,SAAS,CAAC,YAAM,CACf,CADQ,CAAT;;AAKA,WAASQ,gBAAT,CAA0BC,KAA1B,EAAqC;AAEnC,eAACL,UAAD;AAAA,aAAqBC,aAAa,CAACD,UAAU,CAACM,IAAX,CAAgBD,KAAhB,CAAD,CAAlC;AAAA;AACD;;AAMD,MAAIE,SAAS,GAAGR,KAAK,CAACS,KAAN,CAAYC,MAAZ,CAAmBC,QAAnC;AACA,MAAIC,MAAM,GAAGJ,SAAS,CAACK,GAAV,CAAc,UAACC,IAAD;AAAA,WAC3BC,OAAO,CAACC,GAAR,CAAYJ,MAAZ,CAD2B;AAAA,GAAd,CAAb;AAmBE,SACE,KAAC,IAAD;AAAA,cACGA,MAAM,GAAGA,MAAH,GAAW;AADpB,IADF;AAKD;AAED,IAAMK,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB;AAC/BC,EAAAA,UAAU,EAAE;AACVC,IAAAA,KAAK,EAAE;AADG;AADmB,CAAlB,CAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { View, Text, Button, StyleSheet } from 'react-native'\nimport { NativeStackScreenProps } from '@react-navigation/native-stack';\nimport ApiService from '../ApiService';\n\n\ntype FriendsScreenParamList = {\n\n}\n\ntype Props = NativeStackScreenProps<FriendsScreenParamList, 'FriendsScreen'>;\n\nexport default function FriendsScreen(props: any) {\n\n  interface UserType {\n    firstName:string,\n    lastName:string,\n    email:string,\n    password:string,\n    }\n\n\n  const [eventUsers, setEventUsers] = useState([])\n  const [toggleArray, setToggleArray]: any[] = useState([])\n\n\nuseEffect(() => {\n})\n\n\n\nfunction registerAttendee(email:any) {\n  // setToggleArray(toggleArray =>  toggleArray.push(email));\n  (eventUsers: any) => setEventUsers(eventUsers.push(email))\n}\n\n\n\n\n// let userArr = props.route.params.userList;\nlet userGroup = props.route.params.userList\nlet answer = userGroup.map((user: any) =>\nconsole.log(answer)\n\n\n    // <Button\n\n    //       // color={toggleArray.includes(user.email) ? 'black' : 'white'}\n    //       title={user.firstName + \" \" + user.lastName}\n    //       onPress={()=> {\n    //         setToggleArray((toggleArray: any) => [...toggleArray, user.email])\n    //         registerAttendee(user.email)\n\n    //       }}\n\n    //     />\n\n  )\n\n\n  return (\n    <View>\n      {answer ? answer: \"hi\"}\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  btnClicked: {\n    color: 'red'\n  }\n})\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nexport default (function (blinkProps) {\n  var _ref = blinkProps || {},\n      _ref$blinkRate = _ref.blinkRate,\n      blinkRate = _ref$blinkRate === void 0 ? 500 : _ref$blinkRate;\n\n  var _React$useState = React.useState(true),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      visible = _React$useState2[0],\n      setVisible = _React$useState2[1];\n\n  var interval = React.useRef();\n  React.useEffect(function () {\n    interval.current = setInterval(function () {\n      setVisible(function (prevVisible) {\n        return !prevVisible;\n      });\n    }, blinkRate);\n    return function () {\n      interval.current && clearInterval(interval.current);\n    };\n  }, [blinkRate]);\n  return visible;\n});","map":{"version":3,"sources":["useBlink.ts"],"names":["blinkProps","blinkRate","React","interval","setInterval","setVisible","prevVisible","clearInterval"],"mappings":";AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AASA,gBAAgBA,UAAAA,UAAD,EAA6B;AAC1C,aAA4BA,UAAU,IAAtC,EAAA;AAAA,4BAAQC,SAAR;AAAA,MAAQA,SAAR,+BAAoB,GAApB;;AAEA,wBAA8BC,KAAK,CAALA,QAAAA,CAA9B,IAA8BA,CAA9B;AAAA;AAAA,MAAM,OAAN;AAAA,MAAM,UAAN;;AAEA,MAAMC,QAAQ,GAAGD,KAAK,CAAtB,MAAiBA,EAAjB;AAEAA,EAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;AACpBC,IAAAA,QAAQ,CAARA,OAAAA,GAAmBC,WAAW,CAAC,YAAM;AACnCC,MAAAA,UAAU,CAAEC,UAAAA,WAAD;AAAA,eAAiB,CAA5BD,WAAW;AAAA,OAAD,CAAVA;AAD4B,KAAA,EAA9BF,SAA8B,CAA9BA;AAIA,WAAO,YAAM;AACXA,MAAAA,QAAQ,CAARA,OAAAA,IAAoBI,aAAa,CAACJ,QAAQ,CAA1CA,OAAiC,CAAjCA;AADF,KAAA;AALFD,GAAAA,EAQG,CARHA,SAQG,CARHA;AAUA,SAAA,OAAA;AAjBF,CAAA","sourcesContent":["import * as React from 'react';\nimport type { ViewProps } from 'react-native';\nexport interface BlinkProps extends ViewProps {\n  /**\n   * Blink rate in milliseconds. Defaults to 500.\n   */\n  blinkRate?: number;\n}\n\nexport default (blinkProps?: BlinkProps) => {\n  const { blinkRate = 500 } = blinkProps || {};\n\n  const [visible, setVisible] = React.useState(true);\n\n  const interval = React.useRef<NodeJS.Timeout>();\n\n  React.useEffect(() => {\n    interval.current = setInterval(() => {\n      setVisible((prevVisible) => !prevVisible);\n    }, blinkRate);\n\n    return () => {\n      interval.current && clearInterval(interval.current);\n    };\n  }, [blinkRate]);\n\n  return visible;\n};\n"]},"metadata":{},"sourceType":"module"}
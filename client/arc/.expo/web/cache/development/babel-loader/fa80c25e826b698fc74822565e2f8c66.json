{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport ApiService from \"../ApiService\";\nimport { useNavigation } from '@react-navigation/native';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function SingleEventScreen(props) {\n  var navigation = useNavigation();\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      event = _useState2[0],\n      setEvent = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      paid = _useState4[0],\n      setPaid = _useState4[1];\n\n  useEffect(function () {\n    var currentEvent = {\n      event: props.route.params.eventId\n    };\n    ApiService.getEvent(currentEvent).then(function (events) {\n      return setEvent(events);\n    });\n  }, []);\n  useEffect(function () {\n    var currentEvent = {\n      event: props.route.params.eventId\n    };\n    ApiService.getEvent(currentEvent).then(function (answer) {\n      return setPaid(answer.arcsPaid[props.route.params.eventId]);\n    });\n  }, []);\n\n  function payNow(event, user) {\n    ApiService.updatePayment(event, user);\n  }\n\n  var details = event.map(function (event) {\n    return _jsx(Text, {\n      children: event.eventName\n    });\n  });\n  var myArc = event.map(function (event) {\n    return _jsx(View, {\n      children: _jsx(Button, {\n        color: \"blue\",\n        title: paid ? 'Paid!' : 'Pay Now',\n        onPress: function onPress() {\n          setPaid(true);\n          payNow(event._id, props.route.params.user);\n        }\n      })\n    }, event._id);\n  });\n  return _jsxs(View, {\n    children: [details, myArc, _jsx(Button, {\n      color: \"black\",\n      title: \"Back to Events\",\n      onPress: function onPress() {\n        navigation.goBack();\n      }\n    })]\n  });\n}","map":{"version":3,"sources":["/Users/gooseeduardos/Development/codeWorks/senior/arc-app/client/arc/screens/SingleEventScreen.tsx"],"names":["React","useEffect","useState","ApiService","useNavigation","SingleEventScreen","props","navigation","event","setEvent","paid","setPaid","currentEvent","route","params","eventId","getEvent","then","events","answer","arcsPaid","payNow","user","updatePayment","details","map","eventName","myArc","_id","goBack"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;;AAEA,OAAOC,UAAP;AACA,SAASC,aAAT,QAA8B,0BAA9B;;;AAOA,eAAe,SAASC,iBAAT,CAA2BC,KAA3B,EAAsC;AAEnD,MAAMC,UAAU,GAAGH,aAAa,EAAhC;;AAIF,kBAA0BF,QAAQ,CAAQ,EAAR,CAAlC;AAAA;AAAA,MAAOM,KAAP;AAAA,MAAcC,QAAd;;AACA,mBAAwBP,QAAQ,CAAC,KAAD,CAAhC;AAAA;AAAA,MAAOQ,IAAP;AAAA,MAAaC,OAAb;;AAIAV,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMW,YAAY,GAAG;AAACJ,MAAAA,KAAK,EAAEF,KAAK,CAACO,KAAN,CAAYC,MAAZ,CAAmBC;AAA3B,KAArB;AACAZ,IAAAA,UAAU,CAACa,QAAX,CAAoBJ,YAApB,EACCK,IADD,CACM,UAAAC,MAAM;AAAA,aAAIT,QAAQ,CAACS,MAAD,CAAZ;AAAA,KADZ;AAED,GAJQ,EAIP,EAJO,CAAT;AAMAjB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMW,YAAY,GAAG;AAACJ,MAAAA,KAAK,EAAEF,KAAK,CAACO,KAAN,CAAYC,MAAZ,CAAmBC;AAA3B,KAArB;AACAZ,IAAAA,UAAU,CAACa,QAAX,CAAoBJ,YAApB,EACCK,IADD,CACM,UAAAE,MAAM;AAAA,aAAIR,OAAO,CAACQ,MAAM,CAACC,QAAP,CAAgBd,KAAK,CAACO,KAAN,CAAYC,MAAZ,CAAmBC,OAAnC,CAAD,CAAX;AAAA,KADZ;AAED,GAJQ,EAIP,EAJO,CAAT;;AAaA,WAASM,MAAT,CAAgBb,KAAhB,EAA2Bc,IAA3B,EAAqC;AACnCnB,IAAAA,UAAU,CAACoB,aAAX,CAAyBf,KAAzB,EAAgCc,IAAhC;AACD;;AAGD,MAAME,OAAO,GAAGhB,KAAK,CAACiB,GAAN,CAAU,UAACjB,KAAD,EAAW;AACnC,WAAO,KAAC,IAAD;AAAA,gBAAOA,KAAK,CAACkB;AAAb,MAAP;AAED,GAHe,CAAhB;AAOA,MAAMC,KAAK,GAAGnB,KAAK,CAACiB,GAAN,CAAU,UAACjB,KAAD,EAAgB;AAItC,WAAO,KAAC,IAAD;AAAA,gBAEP,KAAC,MAAD;AACI,QAAA,KAAK,EAAC,MADV;AAEI,QAAA,KAAK,EAAEE,IAAI,GAAG,OAAH,GAAa,SAF5B;AAGI,QAAA,OAAO,EAAE,mBAAM;AACbC,UAAAA,OAAO,CAAC,IAAD,CAAP;AAEAU,UAAAA,MAAM,CAACb,KAAK,CAACoB,GAAP,EAAYtB,KAAK,CAACO,KAAN,CAAYC,MAAZ,CAAmBQ,IAA/B,CAAN;AACD;AAPL;AAFO,OAAWd,KAAK,CAACoB,GAAjB,CAAP;AAaD,GAjBa,CAAd;AAuBE,SACE,MAAC,IAAD;AAAA,eACGJ,OADH,EAEGG,KAFH,EAGE,KAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,OAAd;AACA,MAAA,KAAK,EAAC,gBADN;AAEA,MAAA,OAAO,EAAE,mBAAM;AACbpB,QAAAA,UAAU,CAACsB,MAAX;AACD;AAJD,MAHF;AAAA,IADF;AAWD","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { View, Text, Button } from 'react-native'\nimport ApiService from '../ApiService'\nimport { useNavigation } from '@react-navigation/native';\n\n\ninterface SingleEventScreenProps {\n  user: string\n}\n\nexport default function SingleEventScreen(props:any) {\n\n  const navigation = useNavigation();\n\n\n\nconst [event, setEvent] = useState<any[]>([])\nconst [paid, setPaid] = useState(false)\n\n// console.log(props.route.params.user)\n\nuseEffect(() => {\n  const currentEvent = {event: props.route.params.eventId}\n  ApiService.getEvent(currentEvent)\n  .then(events => setEvent(events))\n},[]\n)\nuseEffect(() => {\n  const currentEvent = {event: props.route.params.eventId}\n  ApiService.getEvent(currentEvent)\n  .then(answer => setPaid(answer.arcsPaid[props.route.params.eventId]))\n},[]\n)\n\n\n\n\n\n\n\nfunction payNow(event:any, user:any) {\n  ApiService.updatePayment(event, user)\n}\n\n\nconst details = event.map((event) => {\n  return <Text>{event.eventName}</Text>\n\n})\n\n\n\nconst myArc = event.map((event: any) => {\n\n\n\n  return <View key={event._id}>\n\n  <Button\n      color='blue'\n      title={paid ? 'Paid!' : 'Pay Now'}\n      onPress={() => {\n        setPaid(true);\n\n        payNow(event._id, props.route.params.user)\n      }\n        } />\n  </View>\n\n}\n)\n\n\n\n\n  return (\n    <View>\n      {details}\n      {myArc}\n      <Button color='black'\n      title='Back to Events'\n      onPress={() => {\n        navigation.goBack()\n      }}/>\n    </View>\n  )\n}\n// function goBack() {\n//   throw new Error('Function not implemented.');\n// }\n\n"]},"metadata":{},"sourceType":"module"}
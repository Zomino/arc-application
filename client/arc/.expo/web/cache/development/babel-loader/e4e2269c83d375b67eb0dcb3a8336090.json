{"ast":null,"code":"export var addSignPrefixAndSuffix = function addSignPrefixAndSuffix(value, options) {\n  var prefix = options.prefix,\n      sign = options.sign,\n      suffix = options.suffix,\n      signPosition = options.signPosition;\n\n  switch (signPosition) {\n    case 'beforePrefix':\n      return \"\".concat(sign).concat(prefix).concat(value).concat(suffix);\n\n    case 'afterPrefix':\n      return \"\".concat(prefix).concat(sign).concat(value).concat(suffix);\n  }\n};\nexport default (function (input, options) {\n  var _ref = options || {},\n      precision = _ref.precision,\n      _ref$separator = _ref.separator,\n      separator = _ref$separator === void 0 ? ',' : _ref$separator,\n      _ref$delimiter = _ref.delimiter,\n      delimiter = _ref$delimiter === void 0 ? '.' : _ref$delimiter,\n      _ref$prefix = _ref.prefix,\n      prefix = _ref$prefix === void 0 ? '' : _ref$prefix,\n      _ref$suffix = _ref.suffix,\n      suffix = _ref$suffix === void 0 ? '' : _ref$suffix,\n      ignoreNegative = _ref.ignoreNegative,\n      showPositiveSign = _ref.showPositiveSign,\n      _ref$signPosition = _ref.signPosition,\n      signPosition = _ref$signPosition === void 0 ? 'afterPrefix' : _ref$signPosition;\n\n  var negative = ignoreNegative ? false : input < 0;\n  var sign = negative ? '-' : showPositiveSign ? '+' : '';\n  var string = Math.abs(input).toFixed(precision);\n  var parts = string.split('.');\n  var buffer = [];\n  var number = parts[0];\n\n  while (number.length > 0) {\n    buffer.unshift(number.substr(Math.max(0, number.length - 3), 3));\n    number = number.substr(0, number.length - 3);\n  }\n\n  var formattedNumber = '';\n  formattedNumber = buffer.join(delimiter);\n  var decimals = parts[1];\n\n  if (!!precision && decimals) {\n    formattedNumber += separator + decimals;\n  }\n\n  return addSignPrefixAndSuffix(formattedNumber, {\n    prefix: prefix,\n    suffix: suffix,\n    sign: sign,\n    signPosition: signPosition\n  });\n});","map":{"version":3,"sources":["formatNumber.ts"],"names":["addSignPrefixAndSuffix","signPosition","separator","delimiter","prefix","suffix","options","negative","ignoreNegative","input","sign","showPositiveSign","string","Math","parts","buffer","number","formattedNumber","decimals"],"mappings":"AASA,OAAO,IAAMA,sBAAsB,GAAG,SAAzBA,sBAAyB,CAAA,KAAA,EAAA,OAAA,EAGjC;AACH,MAAM,MAAN,GAAA,OAAA,CAAM,MAAN;AAAA,MAAM,IAAN,GAAA,OAAA,CAAM,IAAN;AAAA,MAAM,MAAN,GAAA,OAAA,CAAM,MAAN;AAAA,MAA8BC,YAA9B,GAAA,OAAA,CAA8BA,YAA9B;;AAEA,UAAA,YAAA;AACE,SAAA,cAAA;AACE,aAAA,GAAA,MAAA,CAAA,IAAA,EAAA,MAAA,CAAA,MAAA,EAAA,MAAA,CAAA,KAAA,EAAA,MAAA,CAAA,MAAA,CAAA;;AACF,SAAA,aAAA;AACE,aAAA,GAAA,MAAA,CAAA,MAAA,EAAA,MAAA,CAAA,IAAA,EAAA,MAAA,CAAA,KAAA,EAAA,MAAA,CAAA,MAAA,CAAA;AAJJ;AANK,CAAA;AAcP,gBAAe,UAAA,KAAA,EAAA,OAAA,EAAkD;AAC/D,aASIK,OAAO,IATX,EAAA;AAAA,MAAM,SAAN,QAAM,SAAN;AAAA,4BAEEJ,SAFF;AAAA,MAEEA,SAFF,+BAAM,GAAN;AAAA,4BAGEC,SAHF;AAAA,MAGEA,SAHF,+BAAM,GAAN;AAAA,yBAIEC,MAJF;AAAA,MAIEA,MAJF,4BAAM,EAAN;AAAA,yBAKEC,MALF;AAAA,MAKEA,MALF,4BAAM,EAAN;AAAA,MAAM,cAAN,QAAM,cAAN;AAAA,MAAM,gBAAN,QAAM,gBAAN;AAAA,+BAQEJ,YARF;AAAA,MAQEA,YARF,kCAQiB,aARjB;;AAWA,MAAMM,QAAQ,GAAGC,cAAc,GAAA,KAAA,GAAWC,KAAK,GAA/C,CAAA;AACA,MAAMC,IAAI,GAAGH,QAAQ,GAAA,GAAA,GAASI,gBAAgB,GAAA,GAAA,GAA9C,EAAA;AAEA,MAAMC,MAAM,GAAGC,IAAI,CAAJA,GAAAA,CAAAA,KAAAA,EAAAA,OAAAA,CAAf,SAAeA,CAAf;AAEA,MAAMC,KAAK,GAAGF,MAAM,CAANA,KAAAA,CAAd,GAAcA,CAAd;AACA,MAAMG,MAAM,GAAZ,EAAA;AAEA,MAAIC,MAAM,GAAGF,KAAK,CAAlB,CAAkB,CAAlB;;AACA,SAAOE,MAAM,CAANA,MAAAA,GAAP,CAAA,EAA0B;AACxBD,IAAAA,MAAM,CAANA,OAAAA,CAAeC,MAAM,CAANA,MAAAA,CAAcH,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,EAAYG,MAAM,CAANA,MAAAA,GAA1BA,CAAcH,CAAdG,EAAfD,CAAeC,CAAfD;AACAC,IAAAA,MAAM,GAAGA,MAAM,CAANA,MAAAA,CAAAA,CAAAA,EAAiBA,MAAM,CAANA,MAAAA,GAA1BA,CAASA,CAATA;AACD;;AAED,MAAIC,eAAe,GAAnB,EAAA;AACAA,EAAAA,eAAe,GAAGF,MAAM,CAANA,IAAAA,CAAlBE,SAAkBF,CAAlBE;AAEA,MAAMC,QAAQ,GAAGJ,KAAK,CAAtB,CAAsB,CAAtB;;AACA,MAAI,CAAC,CAAD,SAAA,IAAJ,QAAA,EAA6B;AAC3BG,IAAAA,eAAe,IAAIf,SAAS,GAA5Be,QAAAA;AACD;;AAED,SAAOjB,sBAAsB,CAAA,eAAA,EAAkB;AAC7CI,IAAAA,MAD6C,EAC7CA,MAD6C;AAE7CC,IAAAA,MAF6C,EAE7CA,MAF6C;AAG7CK,IAAAA,IAH6C,EAG7CA,IAH6C;AAI7CT,IAAAA,YAAAA,EAAAA;AAJ6C,GAAlB,CAA7B;AAlCF,CAAA","sourcesContent":["import type { FormatNumberOptions } from '../props';\n\ninterface AddSignPrefixAndSuffixProps {\n  sign?: '+' | '-' | '';\n  prefix?: string;\n  suffix?: string;\n  signPosition: 'beforePrefix' | 'afterPrefix';\n}\n\nexport const addSignPrefixAndSuffix = (\n  value: any,\n  options: AddSignPrefixAndSuffixProps\n) => {\n  const { prefix, sign, suffix, signPosition } = options;\n\n  switch (signPosition) {\n    case 'beforePrefix':\n      return `${sign}${prefix}${value}${suffix}`;\n    case 'afterPrefix':\n      return `${prefix}${sign}${value}${suffix}`;\n  }\n};\n\nexport default (input: number, options?: FormatNumberOptions) => {\n  const {\n    precision,\n    separator = ',',\n    delimiter = '.',\n    prefix = '',\n    suffix = '',\n    ignoreNegative,\n    showPositiveSign,\n    signPosition = 'afterPrefix',\n  } = options || {};\n\n  const negative = ignoreNegative ? false : input < 0;\n  const sign = negative ? '-' : showPositiveSign ? '+' : '';\n\n  const string = Math.abs(input).toFixed(precision);\n\n  const parts = string.split('.');\n  const buffer = [];\n\n  let number = parts[0];\n  while (number.length > 0) {\n    buffer.unshift(number.substr(Math.max(0, number.length - 3), 3));\n    number = number.substr(0, number.length - 3);\n  }\n\n  let formattedNumber = '';\n  formattedNumber = buffer.join(delimiter);\n\n  const decimals = parts[1];\n  if (!!precision && decimals) {\n    formattedNumber += separator + decimals;\n  }\n\n  return addSignPrefixAndSuffix(formattedNumber, {\n    prefix,\n    suffix,\n    sign,\n    signPosition,\n  });\n};\n"]},"metadata":{},"sourceType":"module"}
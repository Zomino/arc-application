{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function FriendsScreen(props) {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      eventUsers = _useState2[0],\n      setEventUsers = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      toggleArray = _useState4[0],\n      setToggleArray = _useState4[1];\n\n  useEffect(function () {});\n\n  function registerAttendee(email) {\n    (function (eventUsers) {\n      return setEventUsers(eventUsers.push(email));\n    });\n  }\n\n  var userList = props.route.params.userList.map(function (user) {\n    return _jsx(Button, {\n      title: user.firstName + \" \" + user.lastName,\n      onPress: function onPress() {\n        setToggleArray(function (toggleArray) {\n          return [].concat(_toConsumableArray(toggleArray), [user.email]);\n        });\n        registerAttendee(user.email);\n      }\n    });\n  });\n  return _jsx(View, {\n    children: userList\n  });\n}\nvar styles = StyleSheet.create({\n  btnClicked: {\n    color: 'red'\n  }\n});","map":{"version":3,"sources":["/Users/gooseeduardos/Development/codeWorks/senior/arc-app/client/arc/screens/FriendsScreen.tsx"],"names":["React","useEffect","useState","FriendsScreen","props","eventUsers","setEventUsers","toggleArray","setToggleArray","registerAttendee","email","push","userList","route","params","map","user","firstName","lastName","styles","StyleSheet","create","btnClicked","color"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;;;AAYA,eAAe,SAASC,aAAT,CAAuBC,KAAvB,EAAmC;AAUhD,kBAAoCF,QAAQ,CAAC,EAAD,CAA5C;AAAA;AAAA,MAAOG,UAAP;AAAA,MAAmBC,aAAnB;;AACA,mBAA6CJ,QAAQ,CAAC,EAAD,CAArD;AAAA;AAAA,MAAOK,WAAP;AAAA,MAAoBC,cAApB;;AAmCFP,EAAAA,SAAS,CAAC,YAAM,CACf,CADQ,CAAT;;AAKA,WAASQ,gBAAT,CAA0BC,KAA1B,EAAqC;AAEnC,eAACL,UAAD;AAAA,aAAqBC,aAAa,CAACD,UAAU,CAACM,IAAX,CAAgBD,KAAhB,CAAD,CAAlC;AAAA;AACD;;AAMD,MAAIE,QAAQ,GAAGR,KAAK,CAACS,KAAN,CAAYC,MAAZ,CAAmBF,QAAnB,CAA4BG,GAA5B,CAAgC,UAACC,IAAD;AAAA,WAG3C,KAAC,MAAD;AAGM,MAAA,KAAK,EAAEA,IAAI,CAACC,SAAL,GAAiB,GAAjB,GAAuBD,IAAI,CAACE,QAHzC;AAIM,MAAA,OAAO,EAAE,mBAAK;AACZV,QAAAA,cAAc,CAAC,UAACD,WAAD;AAAA,8CAA0BA,WAA1B,IAAuCS,IAAI,CAACN,KAA5C;AAAA,SAAD,CAAd;AACAD,QAAAA,gBAAgB,CAACO,IAAI,CAACN,KAAN,CAAhB;AAED;AARP,MAH2C;AAAA,GAAhC,CAAf;AAkBE,SACE,KAAC,IAAD;AAAA,cACGE;AADH,IADF;AAKD;AAED,IAAMO,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB;AAC/BC,EAAAA,UAAU,EAAE;AACVC,IAAAA,KAAK,EAAE;AADG;AADmB,CAAlB,CAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { View, Text, Button, StyleSheet } from 'react-native'\nimport { NativeStackScreenProps } from '@react-navigation/native-stack';\nimport ApiService from '../ApiService';\n\n\ntype FriendsScreenParamList = {\n\n}\n\ntype Props = NativeStackScreenProps<FriendsScreenParamList, 'FriendsScreen'>;\n\nexport default function FriendsScreen(props: any) {\n\n  interface UserType {\n    firstName:string,\n    lastName:string,\n    email:string,\n    password:string,\n    }\n\n\n  const [eventUsers, setEventUsers] = useState([])\n  const [toggleArray, setToggleArray]: any[] = useState([])\n\n\n  // let friends = props.events.map(event =>\n  //   <div className=\"itemContainer\">\n  //     <div className=\"whiteDate\">\n  //     <h1 className=\"dayConverted\">{dayConverter(event.date)}</h1>\n  //     <h1 className=\"monthConverted\">{monthConverter(event.date)}</h1>\n  //     </div>\n  //     <div className=\"EventItem\">\n  //     <div className=\"eventsTitle\">\n  //       {event.title}\n  //     </div>\n  //     <div className=\"eventsDetails\">\n  //       {dateConverter(event.date)}\n  //     </div>\n  //     <div className=\"eventsDetails\">\n  //       {event.venue}\n  //     </div>\n  //     </div>\n  //   </div>\n  // )\n\n  // useEffect(() => {\n  //   ApiService.getUsers()\n  //   // .then(users => console.log(users))\n  //   .then(users => setAllUsers(users))\n  //   .then(allUsers => {\n  //     let userList = allUsers.map(user =>\n  //       <Text>{(user)? user.firstName + ' ' + user.lastName: 'User 1'}</Text>\n  //       )\n  //   })\n  // },[],\n  // )\n\nuseEffect(() => {\n})\n\n\n\nfunction registerAttendee(email:any) {\n  // setToggleArray(toggleArray =>  toggleArray.push(email));\n  (eventUsers: any) => setEventUsers(eventUsers.push(email))\n}\n\n\n\n\n// let userArr = props.route.params.userList;\nlet userList = props.route.params.userList.map((user: any) =>\n\n\n    <Button\n\n          // color={toggleArray.includes(user.email) ? 'black' : 'white'}\n          title={user.firstName + \" \" + user.lastName}\n          onPress={()=> {\n            setToggleArray((toggleArray: any) => [...toggleArray, user.email])\n            registerAttendee(user.email)\n\n          }}\n\n        />\n\n  )\n\n\n  return (\n    <View>\n      {userList}\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  btnClicked: {\n    color: 'red'\n  }\n})\n"]},"metadata":{},"sourceType":"module"}
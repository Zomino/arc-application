{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { useNavigation } from '@react-navigation/native';\nimport ApiService from \"../ApiService\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function EventListScreen(props) {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      myEvents = _useState2[0],\n      setMyEvents = _useState2[1];\n\n  var navigation = useNavigation();\n  useEffect(function () {\n    var currentUser = {\n      user: props.route.params.user\n    };\n    ApiService.getEventsList(currentUser).then(function (events) {\n      return setMyEvents(events);\n    }).catch(function (err) {\n      return console.log(err);\n    });\n  }, []);\n  console.log(myEvents);\n  setTimeout(function () {\n    var attendedEvents = myEvents.map(function (event) {\n      return _jsxs(View, {\n        children: [_jsx(Text, {\n          children: event.eventName\n        }), _jsx(Button, {\n          color: \"blue\",\n          title: \"Go to Event\",\n          onPress: function onPress() {\n            navigation.navigate('SingleEventScreen', {\n              eventId: event._id\n            });\n          }\n        })]\n      }, event._id);\n    });\n    return attendedEvents;\n  }, 100);\n  return _jsxs(View, {\n    children: [_jsx(View, {\n      children: attendedEvents.length ? attendedEvents : _jsx(Text, {\n        children: \"Placeholder\"\n      })\n    }), _jsx(Text, {\n      children: \"Hi\"\n    })]\n  });\n}","map":{"version":3,"sources":["/Users/gooseeduardos/Development/codeWorks/senior/arc-app/client/arc/screens/EventListScreen.tsx"],"names":["React","useEffect","useState","useNavigation","ApiService","EventListScreen","props","myEvents","setMyEvents","navigation","currentUser","user","route","params","getEventsList","then","events","catch","err","console","log","setTimeout","attendedEvents","map","event","eventName","navigate","eventId","_id","length"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;;AAEA,SAASC,aAAT,QAA8B,0BAA9B;AACA,OAAOC,UAAP;;;AASA,eAAe,SAASC,eAAT,CAAyBC,KAAzB,EAAoC;AAEjD,kBAAgCJ,QAAQ,CAAC,EAAD,CAAxC;AAAA;AAAA,MAAOK,QAAP;AAAA,MAAiBC,WAAjB;;AAGA,MAAMC,UAAU,GAAGN,aAAa,EAAhC;AAEAF,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMS,WAAW,GAAG;AAACC,MAAAA,IAAI,EAAEL,KAAK,CAACM,KAAN,CAAYC,MAAZ,CAAmBF;AAA1B,KAApB;AACAP,IAAAA,UAAU,CAACU,aAAX,CAAyBJ,WAAzB,EACCK,IADD,CACM,UAAAC,MAAM;AAAA,aAAIR,WAAW,CAACQ,MAAD,CAAf;AAAA,KADZ,EAECC,KAFD,CAEO,UAAAC,GAAG;AAAA,aAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAAJ;AAAA,KAFV;AAGD,GALQ,EAKP,EALO,CAAT;AAQAC,EAAAA,OAAO,CAACC,GAAR,CAAYb,QAAZ;AAEFc,EAAAA,UAAU,CAAC,YAAM;AAEf,QAAMC,cAAc,GAAGf,QAAQ,CAACgB,GAAT,CAAa,UAACC,KAAD,EACpC;AACE,aAAO,MAAC,IAAD;AAAA,mBACP,KAAC,IAAD;AAAA,oBACGA,KAAK,CAACC;AADT,UADO,EAIP,KAAC,MAAD;AACE,UAAA,KAAK,EAAC,MADR;AAEE,UAAA,KAAK,EAAC,aAFR;AAGE,UAAA,OAAO,EAAE,mBAAM;AACbhB,YAAAA,UAAU,CAACiB,QAAX,CAAoB,mBAApB,EAAyC;AACvCC,cAAAA,OAAO,EAAEH,KAAK,CAACI;AADwB,aAAzC;AAGD;AAPH,UAJO;AAAA,SAAWJ,KAAK,CAACI,GAAjB,CAAP;AAaD,KAfsB,CAAvB;AAkBA,WAAON,cAAP;AACD,GArBS,EAqBR,GArBQ,CAAV;AAuBE,SACE,MAAC,IAAD;AAAA,eACE,KAAC,IAAD;AAAA,gBACGA,cAAc,CAACO,MAAf,GAAwBP,cAAxB,GAAwC,KAAC,IAAD;AAAA;AAAA;AAD3C,MADF,EAIE,KAAC,IAAD;AAAA;AAAA,MAJF;AAAA,IADF;AAQD","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { View, Text, Button} from 'react-native'\nimport { useNavigation } from '@react-navigation/native';\nimport ApiService from '../ApiService';\n\n\n\ninterface EventListScreenProps {\n  user: string\n}\n\n\nexport default function EventListScreen(props:any) {\n\n  const [myEvents, setMyEvents] = useState([])\n\n\n  const navigation = useNavigation();\n\n  useEffect(() => {\n    const currentUser = {user: props.route.params.user}\n    ApiService.getEventsList(currentUser)\n    .then(events => setMyEvents(events))\n    .catch(err => console.log(err))\n  },[],\n  )\n\n  console.log(myEvents)\n\nsetTimeout(() => {\n\n  const attendedEvents = myEvents.map((event: any) =>\n  {\n    return <View key={event._id}>\n    <Text>\n      {event.eventName}\n    </Text>\n    <Button\n      color='blue'\n      title='Go to Event'\n      onPress={() => {\n        navigation.navigate('SingleEventScreen', {\n          eventId: event._id\n        })\n      }} />\n     </View>\n  }\n\n  )\n  return attendedEvents\n},100)\n\n  return (\n    <View>\n      <View>\n        {attendedEvents.length ? attendedEvents: <Text>Placeholder</Text>}\n        </View>\n      <Text>Hi</Text>\n    </View>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"value\", \"onChangeText\", \"onChangeValue\", \"separator\", \"delimiter\", \"prefix\", \"suffix\", \"precision\", \"maxValue\", \"minValue\", \"signPosition\", \"showPositiveSign\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport formatNumber, { addSignPrefixAndSuffix } from \"./utils/formatNumber\";\nexport default React.forwardRef(function (props, ref) {\n  var value = props.value,\n      onChangeText = props.onChangeText,\n      onChangeValue = props.onChangeValue,\n      separator = props.separator,\n      delimiter = props.delimiter,\n      _props$prefix = props.prefix,\n      prefix = _props$prefix === void 0 ? '' : _props$prefix,\n      _props$suffix = props.suffix,\n      suffix = _props$suffix === void 0 ? '' : _props$suffix,\n      _props$precision = props.precision,\n      precision = _props$precision === void 0 ? 2 : _props$precision,\n      maxValue = props.maxValue,\n      minValue = props.minValue,\n      _props$signPosition = props.signPosition,\n      signPosition = _props$signPosition === void 0 ? 'afterPrefix' : _props$signPosition,\n      showPositiveSign = props.showPositiveSign,\n      rest = _objectWithoutProperties(props, _excluded);\n\n  var _React$useState = React.useState(),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      startingWithSign = _React$useState2[0],\n      setStartingWithSign = _React$useState2[1];\n\n  var noNegativeValues = typeof minValue === 'number' && minValue >= 0;\n  var noPositiveValues = typeof maxValue === 'number' && maxValue <= 0;\n  var formattedValue = React.useMemo(function () {\n    if (!!value || value === 0 || value === -0) {\n      return formatNumber(value, {\n        separator: separator,\n        prefix: prefix,\n        suffix: suffix,\n        precision: precision,\n        delimiter: delimiter,\n        ignoreNegative: noNegativeValues,\n        signPosition: signPosition,\n        showPositiveSign: showPositiveSign\n      });\n    } else {\n      return '';\n    }\n  }, [value, separator, prefix, suffix, precision, delimiter, noNegativeValues, signPosition, showPositiveSign]);\n  React.useEffect(function () {\n    onChangeText && onChangeText(formattedValue);\n  }, [formattedValue]);\n  var handleChangeText = React.useCallback(function (text) {\n    var textWithoutPrefix = text;\n\n    if (prefix) {\n      textWithoutPrefix = text.replace(prefix, '');\n\n      if (textWithoutPrefix === text) {\n        textWithoutPrefix = text.replace(prefix.slice(0, -1), '');\n      }\n    }\n\n    var textWithoutPrefixAndSufix = textWithoutPrefix;\n\n    if (suffix) {\n      var suffixRegex = new RegExp(\"\".concat(suffix, \"([^\").concat(suffix, \"]*)$\"));\n      textWithoutPrefixAndSufix = textWithoutPrefix.replace(suffixRegex, '');\n\n      if (textWithoutPrefixAndSufix === textWithoutPrefix) {\n        textWithoutPrefixAndSufix = textWithoutPrefix.replace(suffix.slice(1), '');\n      }\n    }\n\n    if (/^(-|-0)$/.test(text) && !noNegativeValues) {\n      setStartingWithSign('-');\n      onChangeText && onChangeText(addSignPrefixAndSuffix(formattedValue, {\n        prefix: prefix,\n        suffix: suffix,\n        sign: '-',\n        signPosition: signPosition\n      }));\n      return;\n    } else if (/^(\\+|\\+0)$/.test(text) && !noPositiveValues) {\n      setStartingWithSign('+');\n      onChangeText && onChangeText(addSignPrefixAndSuffix(formattedValue, {\n        prefix: prefix,\n        suffix: suffix,\n        sign: '+',\n        signPosition: signPosition\n      }));\n    } else {\n      setStartingWithSign(undefined);\n    }\n\n    var isNegativeValue = textWithoutPrefixAndSufix.includes('-');\n    var textNumericValue = textWithoutPrefixAndSufix.replace(/\\D+/g, '');\n    var numberValue = Number(textNumericValue) * (isNegativeValue ? -1 : 1);\n    var zerosOnValue = textNumericValue.replace(/[^0]/g, '').length;\n    var newValue;\n\n    if (!textNumericValue || !numberValue && zerosOnValue === precision) {\n      newValue = null;\n    } else {\n      newValue = numberValue / Math.pow(10, precision);\n    }\n\n    if (newValue && maxValue && newValue > maxValue) {\n      return;\n    } else if (newValue && minValue && newValue < minValue) {\n      return;\n    }\n\n    onChangeValue && onChangeValue(newValue);\n  }, [suffix, prefix, noNegativeValues, noPositiveValues, precision, maxValue, minValue, onChangeValue, onChangeText, formattedValue, signPosition]);\n  var textInputValue = React.useMemo(function () {\n    return startingWithSign ? addSignPrefixAndSuffix(formattedValue, {\n      prefix: prefix,\n      suffix: suffix,\n      sign: startingWithSign,\n      signPosition: signPosition\n    }) : formattedValue;\n  }, [formattedValue, prefix, signPosition, startingWithSign, suffix]);\n  return React.createElement(TextInput, _extends({\n    keyboardType: \"numeric\",\n    selection: suffix ? {\n      start: Math.max(textInputValue.length - suffix.length, 0)\n    } : props === null || props === void 0 ? void 0 : props.selection\n  }, rest, {\n    value: textInputValue,\n    onChangeText: handleChangeText,\n    ref: ref\n  }));\n});","map":{"version":3,"sources":["CurrencyInput.tsx"],"names":["prefix","suffix","precision","signPosition","rest","React","noNegativeValues","minValue","noPositiveValues","maxValue","formattedValue","value","formatNumber","separator","delimiter","ignoreNegative","showPositiveSign","onChangeText","handleChangeText","text","textWithoutPrefix","textWithoutPrefixAndSufix","suffixRegex","setStartingWithSign","addSignPrefixAndSuffix","sign","isNegativeValue","textNumericValue","numberValue","Number","zerosOnValue","newValue","onChangeValue","textInputValue","startingWithSign","start","Math","props","selection","ref"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { TextInput } from 'react-native';\n\nimport formatNumber, { addSignPrefixAndSuffix } from './utils/formatNumber';\nimport type { CurrencyInputProps } from './props';\n\nexport default React.forwardRef<TextInput, CurrencyInputProps>((props, ref) => {\n  const {\n    value,\n    onChangeText,\n    onChangeValue,\n    separator,\n    delimiter,\n    prefix = '',\n    suffix = '',\n    precision = 2,\n    maxValue,\n    minValue,\n    signPosition = 'afterPrefix',\n    showPositiveSign,\n    ...rest\n  } = props;\n\n  const [startingWithSign, setStartingWithSign] = React.useState<'-' | '+'>();\n\n  const noNegativeValues = typeof minValue === 'number' && minValue >= 0;\n  const noPositiveValues = typeof maxValue === 'number' && maxValue <= 0;\n\n  const formattedValue = React.useMemo(() => {\n    if (!!value || value === 0 || value === -0) {\n      return formatNumber(value, {\n        separator,\n        prefix,\n        suffix,\n        precision,\n        delimiter,\n        ignoreNegative: noNegativeValues,\n        signPosition,\n        showPositiveSign,\n      });\n    } else {\n      return '';\n    }\n  }, [\n    value,\n    separator,\n    prefix,\n    suffix,\n    precision,\n    delimiter,\n    noNegativeValues,\n    signPosition,\n    showPositiveSign,\n  ]);\n\n  React.useEffect(() => {\n    onChangeText && onChangeText(formattedValue);\n  }, [formattedValue]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const handleChangeText = React.useCallback(\n    (text: string) => {\n      let textWithoutPrefix = text;\n\n      if (prefix) {\n        textWithoutPrefix = text.replace(prefix, '');\n        if (textWithoutPrefix === text) {\n          textWithoutPrefix = text.replace(prefix.slice(0, -1), '');\n        }\n      }\n\n      let textWithoutPrefixAndSufix = textWithoutPrefix;\n      if (suffix) {\n        const suffixRegex = new RegExp(`${suffix}([^${suffix}]*)$`);\n        textWithoutPrefixAndSufix = textWithoutPrefix.replace(suffixRegex, '');\n\n        if (textWithoutPrefixAndSufix === textWithoutPrefix) {\n          textWithoutPrefixAndSufix = textWithoutPrefix.replace(suffix.slice(1), '');\n        }\n      }\n\n      // Starting with a minus or plus sign\n      if (/^(-|-0)$/.test(text) && !noNegativeValues) {\n        setStartingWithSign('-');\n        onChangeText &&\n          onChangeText(\n            addSignPrefixAndSuffix(formattedValue, {\n              prefix,\n              suffix,\n              sign: '-',\n              signPosition,\n            })\n          );\n        return;\n      } else if (/^(\\+|\\+0)$/.test(text) && !noPositiveValues) {\n        setStartingWithSign('+');\n        onChangeText &&\n          onChangeText(\n            addSignPrefixAndSuffix(formattedValue, {\n              prefix,\n              suffix,\n              sign: '+',\n              signPosition,\n            })\n          );\n      } else {\n        setStartingWithSign(undefined);\n      }\n\n      const isNegativeValue = textWithoutPrefixAndSufix.includes('-');\n\n      const textNumericValue = textWithoutPrefixAndSufix.replace(/\\D+/g, '');\n\n      const numberValue = Number(textNumericValue) * (isNegativeValue ? -1 : 1);\n\n      const zerosOnValue = textNumericValue.replace(/[^0]/g, '').length;\n\n      let newValue: number | null;\n\n      if (!textNumericValue || (!numberValue && zerosOnValue === precision)) {\n        // Allow to clean the value instead of beign 0\n        newValue = null;\n      } else {\n        newValue = numberValue / 10 ** precision;\n      }\n\n      if (newValue && maxValue && newValue > maxValue) {\n        return;\n      } else if (newValue && minValue && newValue < minValue) {\n        return;\n      }\n\n      onChangeValue && onChangeValue(newValue);\n    },\n    [\n      suffix,\n      prefix,\n      noNegativeValues,\n      noPositiveValues,\n      precision,\n      maxValue,\n      minValue,\n      onChangeValue,\n      onChangeText,\n      formattedValue,\n      signPosition,\n    ]\n  );\n\n  const textInputValue = React.useMemo(() => {\n    return startingWithSign\n      ? addSignPrefixAndSuffix(formattedValue, {\n          prefix,\n          suffix,\n          sign: startingWithSign,\n          signPosition,\n        })\n      : formattedValue;\n  }, [formattedValue, prefix, signPosition, startingWithSign, suffix]);\n\n  return (\n    <TextInput\n      keyboardType=\"numeric\"\n      selection={\n        suffix\n          ? { start: Math.max(textInputValue.length - suffix.length, 0) }\n          : props?.selection\n      }\n      {...rest}\n      value={textInputValue}\n      onChangeText={handleChangeText}\n      ref={ref}\n    />\n  );\n});\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"value\", \"style\", \"onChangeText\", \"containerStyle\", \"caretHidden\", \"caretColor\", \"selectionColor\", \"onFocus\", \"onBlur\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport CurrencyInput from \"./CurrencyInput\";\nimport TextWithCursor from \"./TextWithCursor\";\nvar FakeCurrencyInput = React.forwardRef(function (props, ref) {\n  var value = props.value,\n      style = props.style,\n      _onChangeText = props.onChangeText,\n      containerStyle = props.containerStyle,\n      caretHidden = props.caretHidden,\n      caretColor = props.caretColor,\n      selectionColor = props.selectionColor,\n      _onFocus = props.onFocus,\n      _onBlur = props.onBlur,\n      rest = _objectWithoutProperties(props, _excluded);\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      focused = _React$useState2[0],\n      setFocused = _React$useState2[1];\n\n  var _React$useState3 = React.useState(''),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      formattedValue = _React$useState4[0],\n      setFormattedValue = _React$useState4[1];\n\n  return React.createElement(View, {\n    style: [containerStyle, styles.inputContainer]\n  }, React.createElement(TextWithCursor, {\n    style: style,\n    cursorVisible: focused && !caretHidden,\n    cursorProps: {\n      style: {\n        color: caretColor || selectionColor\n      }\n    }\n  }, formattedValue), React.createElement(CurrencyInput, _extends({\n    value: value,\n    onChangeText: function onChangeText(text) {\n      setFormattedValue(text);\n      _onChangeText && _onChangeText(text);\n    }\n  }, rest, {\n    selectionColor: \"transparent\",\n    caretHidden: true,\n    onFocus: function onFocus(e) {\n      setFocused(true);\n      _onFocus && _onFocus(e);\n    },\n    onBlur: function onBlur(e) {\n      setFocused(false);\n      _onBlur && _onBlur(e);\n    },\n    style: styles.inputHidden,\n    ref: ref\n  })));\n});\nvar styles = StyleSheet.create({\n  inputContainer: {\n    position: 'relative'\n  },\n  inputHidden: {\n    color: 'transparent',\n    position: 'absolute',\n    top: 0,\n    left: -20,\n    right: 0,\n    bottom: 0,\n    fontSize: 1\n  }\n});\nexport default FakeCurrencyInput;","map":{"version":3,"sources":["FakeCurrencyInput.tsx"],"names":["FakeCurrencyInput","rest","React","styles","focused","style","color","caretColor","selectionColor","text","setFormattedValue","onChangeText","e","setFocused","onFocus","onBlur","ref","inputContainer","position","inputHidden","top","left","right","bottom","fontSize"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;;AAGA,OAAA,aAAA;AACA,OAAA,cAAA;AAOA,IAAMA,iBAAiB,GAAG,KAAK,CAAL,UAAA,CACxB,UAAA,KAAA,EAAA,GAAA,EAAgB;AACd,MAAM,KAAN,GAAA,KAAA,CAAM,KAAN;AAAA,MAAM,KAAN,GAAA,KAAA,CAAM,KAAN;AAAA,MAAM,aAAN,GAAA,KAAA,CAAM,YAAN;AAAA,MAAM,cAAN,GAAA,KAAA,CAAM,cAAN;AAAA,MAAM,WAAN,GAAA,KAAA,CAAM,WAAN;AAAA,MAAM,UAAN,GAAA,KAAA,CAAM,UAAN;AAAA,MAAM,cAAN,GAAA,KAAA,CAAM,cAAN;AAAA,MAAM,QAAN,GAAA,KAAA,CAAM,OAAN;AAAA,MAAM,OAAN,GAAA,KAAA,CAAM,MAAN;AAAA,MAUKC,IAVL,4BAAA,KAAA;;AAaA,wBAA8BC,KAAK,CAALA,QAAAA,CAA9B,KAA8BA,CAA9B;AAAA;AAAA,MAAM,OAAN;AAAA,MAAM,UAAN;;AACA,yBAA4CA,KAAK,CAALA,QAAAA,CAA5C,EAA4CA,CAA5C;AAAA;AAAA,MAAM,cAAN;AAAA,MAAM,iBAAN;;AAEA,SACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,IAAA,KAAK,EAAE,CAAA,cAAA,EAAiBC,MAAM,CAAvB,cAAA;AAAb,GAAA,EACE,KAAA,CAAA,aAAA,CAAA,cAAA,EAAA;AACE,IAAA,KAAK,EADP,KAAA;AAEE,IAAA,aAAa,EAAEC,OAAO,IAAI,CAF5B,WAAA;AAGE,IAAA,WAAW,EAAE;AAAEC,MAAAA,KAAK,EAAE;AAAEC,QAAAA,KAAK,EAAEC,UAAU,IAAIC;AAAvB;AAAT;AAHf,GAAA,EADF,cACE,CADF,EAQE,KAAA,CAAA,aAAA,CAAA,aAAA,EAAA,QAAA,CAAA;AACE,IAAA,KAAK,EADP,KAAA;AAEE,IAAA,YAAY,EAAGC,sBAAAA,IAAD,EAAU;AACtBC,MAAAA,iBAAiB,CAAjBA,IAAiB,CAAjBA;AACAC,MAAAA,aAAY,IAAIA,aAAY,CAA5BA,IAA4B,CAA5BA;AACD;AALH,GAAA,EAAA,IAAA,EAAA;AAOE,IAAA,cAAc,EAPhB,aAAA;AAQE,IAAA,WAAW,EARb,IAAA;AASE,IAAA,OAAO,EAAGC,iBAAAA,CAAD,EAAO;AACdC,MAAAA,UAAU,CAAVA,IAAU,CAAVA;AACAC,MAAAA,QAAO,IAAIA,QAAO,CAAlBA,CAAkB,CAAlBA;AAXJ,KAAA;AAaE,IAAA,MAAM,EAAGF,gBAAAA,CAAD,EAAO;AACbC,MAAAA,UAAU,CAAVA,KAAU,CAAVA;AACAE,MAAAA,OAAM,IAAIA,OAAM,CAAhBA,CAAgB,CAAhBA;AAfJ,KAAA;AAiBE,IAAA,KAAK,EAAEZ,MAAM,CAjBf,WAAA;AAkBE,IAAA,GAAG,EAAEa;AAlBP,GAAA,CAAA,CARF,CADF;AAlBJ,CAA0B,CAA1B;AAoDA,IAAMb,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;AAC/Bc,EAAAA,cAAc,EAAE;AACdC,IAAAA,QAAQ,EAAE;AADI,GADe;AAI/BC,EAAAA,WAAW,EAAE;AACXb,IAAAA,KAAK,EADM,aAAA;AAEXY,IAAAA,QAAQ,EAFG,UAAA;AAGXE,IAAAA,GAAG,EAHQ,CAAA;AAIXC,IAAAA,IAAI,EAAE,CAJK,EAAA;AAKXC,IAAAA,KAAK,EALM,CAAA;AAMXC,IAAAA,MAAM,EANK,CAAA;AAOXC,IAAAA,QAAQ,EAAE;AAPC;AAJkB,CAAlB,CAAf;AAeA,eAAA,iBAAA","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, TextInput, View } from 'react-native';\n\nimport CurrencyInput from './CurrencyInput';\nimport TextWithCursor from './TextWithCursor';\nimport type { FakeCurrencyInputProps } from './props';\n\n/**\n * This component hides the real currency input and use a Text to imitate the input. So you won't get the flickering issue, but will lost selection functionality.\n * The cursor is not a real cursor, but a pipe character (|) and it'll be always at the end of the text.\n */\nconst FakeCurrencyInput = React.forwardRef<TextInput, FakeCurrencyInputProps>(\n  (props, ref) => {\n    const {\n      value,\n      style,\n      onChangeText,\n      containerStyle,\n      caretHidden,\n      caretColor,\n      selectionColor,\n      onFocus,\n      onBlur,\n      ...rest\n    } = props;\n\n    const [focused, setFocused] = React.useState(false);\n    const [formattedValue, setFormattedValue] = React.useState('');\n\n    return (\n      <View style={[containerStyle, styles.inputContainer]}>\n        <TextWithCursor\n          style={style}\n          cursorVisible={focused && !caretHidden}\n          cursorProps={{ style: { color: caretColor || selectionColor } }}\n        >\n          {formattedValue}\n        </TextWithCursor>\n        <CurrencyInput\n          value={value}\n          onChangeText={(text) => {\n            setFormattedValue(text);\n            onChangeText && onChangeText(text);\n          }}\n          {...rest}\n          selectionColor=\"transparent\"\n          caretHidden\n          onFocus={(e) => {\n            setFocused(true);\n            onFocus && onFocus(e);\n          }}\n          onBlur={(e) => {\n            setFocused(false);\n            onBlur && onBlur(e);\n          }}\n          style={styles.inputHidden}\n          ref={ref}\n        />\n      </View>\n    );\n  }\n);\n\nconst styles = StyleSheet.create({\n  inputContainer: {\n    position: 'relative',\n  },\n  inputHidden: {\n    color: 'transparent',\n    position: 'absolute',\n    top: 0,\n    left: -20,\n    right: 0,\n    bottom: 0,\n    fontSize: 1,\n  },\n});\n\nexport default FakeCurrencyInput;\n"]},"metadata":{},"sourceType":"module"}